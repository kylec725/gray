// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentServiceClient is the client API for TorrentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentServiceClient interface {
	// Requests a list of all managed torrents
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TorrentService_ListClient, error)
	// Adds another torrent to be managed
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*TorrentReply, error)
	// Removes a torrent from being managed
	Remove(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error)
	// Starts a torrent's download/upload
	Start(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error)
	// Stops a torrent's download/upload
	Stop(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error)
}

type torrentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentServiceClient(cc grpc.ClientConnInterface) TorrentServiceClient {
	return &torrentServiceClient{cc}
}

func (c *torrentServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TorrentService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &TorrentService_ServiceDesc.Streams[0], "/graytorrent.TorrentService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &torrentServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TorrentService_ListClient interface {
	Recv() (*Torrent, error)
	grpc.ClientStream
}

type torrentServiceListClient struct {
	grpc.ClientStream
}

func (x *torrentServiceListClient) Recv() (*Torrent, error) {
	m := new(Torrent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *torrentServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*TorrentReply, error) {
	out := new(TorrentReply)
	err := c.cc.Invoke(ctx, "/graytorrent.TorrentService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) Remove(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error) {
	out := new(TorrentReply)
	err := c.cc.Invoke(ctx, "/graytorrent.TorrentService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) Start(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error) {
	out := new(TorrentReply)
	err := c.cc.Invoke(ctx, "/graytorrent.TorrentService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) Stop(ctx context.Context, in *TorrentRequest, opts ...grpc.CallOption) (*TorrentReply, error) {
	out := new(TorrentReply)
	err := c.cc.Invoke(ctx, "/graytorrent.TorrentService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServiceServer is the server API for TorrentService service.
// All implementations must embed UnimplementedTorrentServiceServer
// for forward compatibility
type TorrentServiceServer interface {
	// Requests a list of all managed torrents
	List(*Empty, TorrentService_ListServer) error
	// Adds another torrent to be managed
	Add(context.Context, *AddRequest) (*TorrentReply, error)
	// Removes a torrent from being managed
	Remove(context.Context, *TorrentRequest) (*TorrentReply, error)
	// Starts a torrent's download/upload
	Start(context.Context, *TorrentRequest) (*TorrentReply, error)
	// Stops a torrent's download/upload
	Stop(context.Context, *TorrentRequest) (*TorrentReply, error)
	mustEmbedUnimplementedTorrentServiceServer()
}

// UnimplementedTorrentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentServiceServer struct {
}

func (UnimplementedTorrentServiceServer) List(*Empty, TorrentService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTorrentServiceServer) Add(context.Context, *AddRequest) (*TorrentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTorrentServiceServer) Remove(context.Context, *TorrentRequest) (*TorrentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedTorrentServiceServer) Start(context.Context, *TorrentRequest) (*TorrentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTorrentServiceServer) Stop(context.Context, *TorrentRequest) (*TorrentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTorrentServiceServer) mustEmbedUnimplementedTorrentServiceServer() {}

// UnsafeTorrentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServiceServer will
// result in compilation errors.
type UnsafeTorrentServiceServer interface {
	mustEmbedUnimplementedTorrentServiceServer()
}

func RegisterTorrentServiceServer(s grpc.ServiceRegistrar, srv TorrentServiceServer) {
	s.RegisterService(&TorrentService_ServiceDesc, srv)
}

func _TorrentService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentServiceServer).List(m, &torrentServiceListServer{stream})
}

type TorrentService_ListServer interface {
	Send(*Torrent) error
	grpc.ServerStream
}

type torrentServiceListServer struct {
	grpc.ServerStream
}

func (x *torrentServiceListServer) Send(m *Torrent) error {
	return x.ServerStream.SendMsg(m)
}

func _TorrentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.TorrentService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.TorrentService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Remove(ctx, req.(*TorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.TorrentService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Start(ctx, req.(*TorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.TorrentService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Stop(ctx, req.(*TorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentService_ServiceDesc is the grpc.ServiceDesc for TorrentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graytorrent.TorrentService",
	HandlerType: (*TorrentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TorrentService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _TorrentService_Remove_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TorrentService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TorrentService_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _TorrentService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "graytorrent.proto",
}
