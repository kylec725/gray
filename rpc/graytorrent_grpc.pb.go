// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentClient is the client API for Torrent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentClient interface {
	// Sends an authorization key to the server to start the session
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
}

type torrentClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentClient(cc grpc.ClientConnInterface) TorrentClient {
	return &torrentClient{cc}
}

func (c *torrentClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/graytorrent.Torrent/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServer is the server API for Torrent service.
// All implementations must embed UnimplementedTorrentServer
// for forward compatibility
type TorrentServer interface {
	// Sends an authorization key to the server to start the session
	Connect(context.Context, *ConnectRequest) (*ConnectReply, error)
	mustEmbedUnimplementedTorrentServer()
}

// UnimplementedTorrentServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentServer struct {
}

func (UnimplementedTorrentServer) Connect(context.Context, *ConnectRequest) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTorrentServer) mustEmbedUnimplementedTorrentServer() {}

// UnsafeTorrentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServer will
// result in compilation errors.
type UnsafeTorrentServer interface {
	mustEmbedUnimplementedTorrentServer()
}

func RegisterTorrentServer(s grpc.ServiceRegistrar, srv TorrentServer) {
	s.RegisterService(&Torrent_ServiceDesc, srv)
}

func _Torrent_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.Torrent/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Torrent_ServiceDesc is the grpc.ServiceDesc for Torrent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Torrent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graytorrent.Torrent",
	HandlerType: (*TorrentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Torrent_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graytorrent.proto",
}
