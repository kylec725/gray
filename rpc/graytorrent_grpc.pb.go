// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentClient is the client API for Torrent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentClient interface {
	// Requests a list of all managed torrents
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Torrent_ListClient, error)
	// Adds another torrent to be managed
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	// Removes a torrent from being managed
	Remove(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error)
	// Starts a torrent's download/upload
	Start(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error)
	// Stops a torrent's download/upload
	Stop(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error)
}

type torrentClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentClient(cc grpc.ClientConnInterface) TorrentClient {
	return &torrentClient{cc}
}

func (c *torrentClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Torrent_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Torrent_ServiceDesc.Streams[0], "/graytorrent.Torrent/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &torrentListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Torrent_ListClient interface {
	Recv() (*TorrentInfo, error)
	grpc.ClientStream
}

type torrentListClient struct {
	grpc.ClientStream
}

func (x *torrentListClient) Recv() (*TorrentInfo, error) {
	m := new(TorrentInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *torrentClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/graytorrent.Torrent/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentClient) Remove(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/graytorrent.Torrent/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentClient) Start(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/graytorrent.Torrent/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentClient) Stop(ctx context.Context, in *SelectedTorrent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/graytorrent.Torrent/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServer is the server API for Torrent service.
// All implementations must embed UnimplementedTorrentServer
// for forward compatibility
type TorrentServer interface {
	// Requests a list of all managed torrents
	List(*Empty, Torrent_ListServer) error
	// Adds another torrent to be managed
	Add(context.Context, *AddRequest) (*AddReply, error)
	// Removes a torrent from being managed
	Remove(context.Context, *SelectedTorrent) (*Empty, error)
	// Starts a torrent's download/upload
	Start(context.Context, *SelectedTorrent) (*Empty, error)
	// Stops a torrent's download/upload
	Stop(context.Context, *SelectedTorrent) (*Empty, error)
	mustEmbedUnimplementedTorrentServer()
}

// UnimplementedTorrentServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentServer struct {
}

func (UnimplementedTorrentServer) List(*Empty, Torrent_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTorrentServer) Add(context.Context, *AddRequest) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTorrentServer) Remove(context.Context, *SelectedTorrent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedTorrentServer) Start(context.Context, *SelectedTorrent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTorrentServer) Stop(context.Context, *SelectedTorrent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTorrentServer) mustEmbedUnimplementedTorrentServer() {}

// UnsafeTorrentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServer will
// result in compilation errors.
type UnsafeTorrentServer interface {
	mustEmbedUnimplementedTorrentServer()
}

func RegisterTorrentServer(s grpc.ServiceRegistrar, srv TorrentServer) {
	s.RegisterService(&Torrent_ServiceDesc, srv)
}

func _Torrent_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentServer).List(m, &torrentListServer{stream})
}

type Torrent_ListServer interface {
	Send(*TorrentInfo) error
	grpc.ServerStream
}

type torrentListServer struct {
	grpc.ServerStream
}

func (x *torrentListServer) Send(m *TorrentInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Torrent_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.Torrent/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrent_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedTorrent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.Torrent/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServer).Remove(ctx, req.(*SelectedTorrent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrent_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedTorrent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.Torrent/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServer).Start(ctx, req.(*SelectedTorrent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrent_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedTorrent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graytorrent.Torrent/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServer).Stop(ctx, req.(*SelectedTorrent))
	}
	return interceptor(ctx, in, info, handler)
}

// Torrent_ServiceDesc is the grpc.ServiceDesc for Torrent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Torrent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graytorrent.Torrent",
	HandlerType: (*TorrentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Torrent_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Torrent_Remove_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Torrent_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Torrent_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Torrent_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "graytorrent.proto",
}
